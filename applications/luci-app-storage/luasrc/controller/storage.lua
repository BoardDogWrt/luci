-- Copyright 2017 Alberto Bursi <alberto.bursi@outlook.it>
-- Licensed to the public under the Apache License 2.0.

module("luci.controller.storage", package.seeall)

function index()
	entry({"admin", "services", "storage"}, template("storage/prepare_storage"), _("Storage setup"), 90)
	entry({"admin", "services", "storage", "select_filesystem"}, post("action_select_filesystem"))
	entry({"admin", "services", "storage", "RAID_preset"}, post("action_RAID_preset"))

	--autogenerated index function calls go here--
	entry({"admin", "services", "storage", "select_drive_ext4"}, post("action_select_drive_ext4"))
	entry({"admin", "services", "storage", "select_drive_xfs"}, post("action_select_drive_xfs"))
	entry({"admin", "services", "storage", "select_drive_f2fs"}, post("action_select_drive_f2fs"))
	entry({"admin", "services", "storage", "select_drive_vfat"}, post("action_select_drive_vfat"))
	entry({"admin", "services", "storage", "format_sda_ext4"}, post("action_format_sda_ext4"))
	entry({"admin", "services", "storage", "format_sda_xfs"}, post("action_format_sda_xfs"))
	entry({"admin", "services", "storage", "format_sda_f2fs"}, post("action_format_sda_f2fs"))
	entry({"admin", "services", "storage", "format_sda_vfat"}, post("action_format_sda_vfat"))
	entry({"admin", "services", "storage", "format_sdb_ext4"}, post("action_format_sdb_ext4"))
	entry({"admin", "services", "storage", "format_sdb_xfs"}, post("action_format_sdb_xfs"))
	entry({"admin", "services", "storage", "format_sdb_f2fs"}, post("action_format_sdb_f2fs"))
	entry({"admin", "services", "storage", "format_sdb_vfat"}, post("action_format_sdb_vfat"))
	entry({"admin", "services", "storage", "format_sdc_ext4"}, post("action_format_sdc_ext4"))
	entry({"admin", "services", "storage", "format_sdc_xfs"}, post("action_format_sdc_xfs"))
	entry({"admin", "services", "storage", "format_sdc_f2fs"}, post("action_format_sdc_f2fs"))
	entry({"admin", "services", "storage", "format_sdc_vfat"}, post("action_format_sdc_vfat"))
	entry({"admin", "services", "storage", "format_sdd_ext4"}, post("action_format_sdd_ext4"))
	entry({"admin", "services", "storage", "format_sdd_xfs"}, post("action_format_sdd_xfs"))
	entry({"admin", "services", "storage", "format_sdd_f2fs"}, post("action_format_sdd_f2fs"))
	entry({"admin", "services", "storage", "format_sdd_vfat"}, post("action_format_sdd_vfat"))
	entry({"admin", "services", "storage", "format_sde_ext4"}, post("action_format_sde_ext4"))
	entry({"admin", "services", "storage", "format_sde_xfs"}, post("action_format_sde_xfs"))
	entry({"admin", "services", "storage", "format_sde_f2fs"}, post("action_format_sde_f2fs"))
	entry({"admin", "services", "storage", "format_sde_vfat"}, post("action_format_sde_vfat"))
	entry({"admin", "services", "storage", "format_sdf_ext4"}, post("action_format_sdf_ext4"))
	entry({"admin", "services", "storage", "format_sdf_xfs"}, post("action_format_sdf_xfs"))
	entry({"admin", "services", "storage", "format_sdf_f2fs"}, post("action_format_sdf_f2fs"))
	entry({"admin", "services", "storage", "format_sdf_vfat"}, post("action_format_sdf_vfat"))
	entry({"admin", "services", "storage", "format_sdg_ext4"}, post("action_format_sdg_ext4"))
	entry({"admin", "services", "storage", "format_sdg_xfs"}, post("action_format_sdg_xfs"))
	entry({"admin", "services", "storage", "format_sdg_f2fs"}, post("action_format_sdg_f2fs"))
	entry({"admin", "services", "storage", "format_sdg_vfat"}, post("action_format_sdg_vfat"))
	entry({"admin", "services", "storage", "format_sdh_ext4"}, post("action_format_sdh_ext4"))
	entry({"admin", "services", "storage", "format_sdh_xfs"}, post("action_format_sdh_xfs"))
	entry({"admin", "services", "storage", "format_sdh_f2fs"}, post("action_format_sdh_f2fs"))
	entry({"admin", "services", "storage", "format_sdh_vfat"}, post("action_format_sdh_vfat"))
	entry({"admin", "services", "storage", "format_sdi_ext4"}, post("action_format_sdi_ext4"))
	entry({"admin", "services", "storage", "format_sdi_xfs"}, post("action_format_sdi_xfs"))
	entry({"admin", "services", "storage", "format_sdi_f2fs"}, post("action_format_sdi_f2fs"))
	entry({"admin", "services", "storage", "format_sdi_vfat"}, post("action_format_sdi_vfat"))
	entry({"admin", "services", "storage", "format_sdj_ext4"}, post("action_format_sdj_ext4"))
	entry({"admin", "services", "storage", "format_sdj_xfs"}, post("action_format_sdj_xfs"))
	entry({"admin", "services", "storage", "format_sdj_f2fs"}, post("action_format_sdj_f2fs"))
	entry({"admin", "services", "storage", "format_sdj_vfat"}, post("action_format_sdj_vfat"))
	entry({"admin", "services", "storage", "format_sdk_ext4"}, post("action_format_sdk_ext4"))
	entry({"admin", "services", "storage", "format_sdk_xfs"}, post("action_format_sdk_xfs"))
	entry({"admin", "services", "storage", "format_sdk_f2fs"}, post("action_format_sdk_f2fs"))
	entry({"admin", "services", "storage", "format_sdk_vfat"}, post("action_format_sdk_vfat"))
	entry({"admin", "services", "storage", "format_sdl_ext4"}, post("action_format_sdl_ext4"))
	entry({"admin", "services", "storage", "format_sdl_xfs"}, post("action_format_sdl_xfs"))
	entry({"admin", "services", "storage", "format_sdl_f2fs"}, post("action_format_sdl_f2fs"))
	entry({"admin", "services", "storage", "format_sdl_vfat"}, post("action_format_sdl_vfat"))
	entry({"admin", "services", "storage", "format_sdm_ext4"}, post("action_format_sdm_ext4"))
	entry({"admin", "services", "storage", "format_sdm_xfs"}, post("action_format_sdm_xfs"))
	entry({"admin", "services", "storage", "format_sdm_f2fs"}, post("action_format_sdm_f2fs"))
	entry({"admin", "services", "storage", "format_sdm_vfat"}, post("action_format_sdm_vfat"))
	entry({"admin", "services", "storage", "format_sdn_ext4"}, post("action_format_sdn_ext4"))
	entry({"admin", "services", "storage", "format_sdn_xfs"}, post("action_format_sdn_xfs"))
	entry({"admin", "services", "storage", "format_sdn_f2fs"}, post("action_format_sdn_f2fs"))
	entry({"admin", "services", "storage", "format_sdn_vfat"}, post("action_format_sdn_vfat"))
	entry({"admin", "services", "storage", "format_sdo_ext4"}, post("action_format_sdo_ext4"))
	entry({"admin", "services", "storage", "format_sdo_xfs"}, post("action_format_sdo_xfs"))
	entry({"admin", "services", "storage", "format_sdo_f2fs"}, post("action_format_sdo_f2fs"))
	entry({"admin", "services", "storage", "format_sdo_vfat"}, post("action_format_sdo_vfat"))
	entry({"admin", "services", "storage", "format_sdp_ext4"}, post("action_format_sdp_ext4"))
	entry({"admin", "services", "storage", "format_sdp_xfs"}, post("action_format_sdp_xfs"))
	entry({"admin", "services", "storage", "format_sdp_f2fs"}, post("action_format_sdp_f2fs"))
	entry({"admin", "services", "storage", "format_sdp_vfat"}, post("action_format_sdp_vfat"))
	entry({"admin", "services", "storage", "format_sdq_ext4"}, post("action_format_sdq_ext4"))
	entry({"admin", "services", "storage", "format_sdq_xfs"}, post("action_format_sdq_xfs"))
	entry({"admin", "services", "storage", "format_sdq_f2fs"}, post("action_format_sdq_f2fs"))
	entry({"admin", "services", "storage", "format_sdq_vfat"}, post("action_format_sdq_vfat"))
	entry({"admin", "services", "storage", "format_sdr_ext4"}, post("action_format_sdr_ext4"))
	entry({"admin", "services", "storage", "format_sdr_xfs"}, post("action_format_sdr_xfs"))
	entry({"admin", "services", "storage", "format_sdr_f2fs"}, post("action_format_sdr_f2fs"))
	entry({"admin", "services", "storage", "format_sdr_vfat"}, post("action_format_sdr_vfat"))
	entry({"admin", "services", "storage", "format_sds_ext4"}, post("action_format_sds_ext4"))
	entry({"admin", "services", "storage", "format_sds_xfs"}, post("action_format_sds_xfs"))
	entry({"admin", "services", "storage", "format_sds_f2fs"}, post("action_format_sds_f2fs"))
	entry({"admin", "services", "storage", "format_sds_vfat"}, post("action_format_sds_vfat"))
	entry({"admin", "services", "storage", "format_sdt_ext4"}, post("action_format_sdt_ext4"))
	entry({"admin", "services", "storage", "format_sdt_xfs"}, post("action_format_sdt_xfs"))
	entry({"admin", "services", "storage", "format_sdt_f2fs"}, post("action_format_sdt_f2fs"))
	entry({"admin", "services", "storage", "format_sdt_vfat"}, post("action_format_sdt_vfat"))
	entry({"admin", "services", "storage", "format_sdu_ext4"}, post("action_format_sdu_ext4"))
	entry({"admin", "services", "storage", "format_sdu_xfs"}, post("action_format_sdu_xfs"))
	entry({"admin", "services", "storage", "format_sdu_f2fs"}, post("action_format_sdu_f2fs"))
	entry({"admin", "services", "storage", "format_sdu_vfat"}, post("action_format_sdu_vfat"))
	entry({"admin", "services", "storage", "format_sdv_ext4"}, post("action_format_sdv_ext4"))
	entry({"admin", "services", "storage", "format_sdv_xfs"}, post("action_format_sdv_xfs"))
	entry({"admin", "services", "storage", "format_sdv_f2fs"}, post("action_format_sdv_f2fs"))
	entry({"admin", "services", "storage", "format_sdv_vfat"}, post("action_format_sdv_vfat"))
	entry({"admin", "services", "storage", "format_sdw_ext4"}, post("action_format_sdw_ext4"))
	entry({"admin", "services", "storage", "format_sdw_xfs"}, post("action_format_sdw_xfs"))
	entry({"admin", "services", "storage", "format_sdw_f2fs"}, post("action_format_sdw_f2fs"))
	entry({"admin", "services", "storage", "format_sdw_vfat"}, post("action_format_sdw_vfat"))
	entry({"admin", "services", "storage", "format_sdx_ext4"}, post("action_format_sdx_ext4"))
	entry({"admin", "services", "storage", "format_sdx_xfs"}, post("action_format_sdx_xfs"))
	entry({"admin", "services", "storage", "format_sdx_f2fs"}, post("action_format_sdx_f2fs"))
	entry({"admin", "services", "storage", "format_sdx_vfat"}, post("action_format_sdx_vfat"))
	entry({"admin", "services", "storage", "format_sdy_ext4"}, post("action_format_sdy_ext4"))
	entry({"admin", "services", "storage", "format_sdy_xfs"}, post("action_format_sdy_xfs"))
	entry({"admin", "services", "storage", "format_sdy_f2fs"}, post("action_format_sdy_f2fs"))
	entry({"admin", "services", "storage", "format_sdy_vfat"}, post("action_format_sdy_vfat"))
	entry({"admin", "services", "storage", "format_sdz_ext4"}, post("action_format_sdz_ext4"))
	entry({"admin", "services", "storage", "format_sdz_xfs"}, post("action_format_sdz_xfs"))
	entry({"admin", "services", "storage", "format_sdz_f2fs"}, post("action_format_sdz_f2fs"))
	entry({"admin", "services", "storage", "format_sdz_vfat"}, post("action_format_sdz_vfat"))
--end of autogenerated index functions--

end

function call(...)
	return os.execute(...) / 256
end

function exec(command)
	local pp   = io.popen(command)
	local data = pp:read("*a")
	pp:close()

	return data
end

function execi(command)
	local pp = io.popen(command)

	return pp and function()
		local line = pp:read()

		if not line then
			pp:close()
		end

		return line
	end
end

-- Source: http://lua-users.org/wiki/MakingLuaLikePhp
-- Credit: http://richard.warburton.it/
function array_of_lines(div,str)
    if (div=='') then return false end
    local pos,arr = 0,{}
    for st,sp in function() return string.find(str,div,pos,true) end do
        table.insert(arr,string.sub(str,pos,st-1))
        pos = sp + 1
    end
    table.insert(arr,string.sub(str,pos))
    return arr
end


function extract_word(str,word_n)

    if str == nil then
        return nil
    else
        local words = {}
        for w in str:gmatch("%S+") do
            table.insert(words, w)
        end
        return words[word_n]
    end
end

function strip_numbers(str)

   local str = str:gsub("[^a-z]",'')
    return str

end


function check_mdadm_raids()

raid_mdstat = exec("cat /proc/mdstat")

if raid_mdstat == ""  then
	return nil
end

local array_mdstat = array_of_lines("\n",raid_mdstat)
local Count = 1
local raid_array_list ={}

while extract_word(array_mdstat[Count],1) ~= nil  do
	local first_word_in_string = string.match(extract_word(array_mdstat[Count],1), "md")
	if first_word_in_string ~= nil then
		local array_line_of_single_mdX = array_of_lines(" ",array_mdstat[Count])
		--extracting raid name
		local word_number_of_line=1
		table.insert(raid_array_list,array_line_of_single_mdX[word_number_of_line])
		word_number_of_line = word_number_of_line + 4
		while array_line_of_single_mdX[word_number_of_line] ~= nil do

			local temp=array_line_of_single_mdX[word_number_of_line]:gsub('%b[]', '')
			table.insert(raid_array_list,temp)

			word_number_of_line = word_number_of_line + 1
		end

	end
	Count = Count + 1
end
return raid_array_list
end

function load_block_device_arrays()

result=exec("lsblk -rn")
arr_lsblk_output=array_of_lines("\n",result)

	local Count = 1
	local check_for_raid=0
	arr_block_devices = {}
	arr_partitions = {}
	arr_mount_point = {}

	while extract_word(arr_lsblk_output[Count],1) ~= nil  do

	local device_name = extract_word(arr_lsblk_output[Count],1)
	local is_mtdblock=string.match(device_name,"^mtdblock")
	local is_cdrom=string.match(device_name,"^sr")
	local is_mdraid=string.match(device_name,"^md")

	if is_mtdblock == nil and is_cdrom == nil and is_mdraid == nil then

		local lsblk_type = extract_word(arr_lsblk_output[Count],6)

		if lsblk_type == "disk" then
			table.insert(arr_block_devices,device_name)
		end
		if lsblk_type == "part" then
			table.insert(arr_partitions,device_name)
			local mounted_at = extract_word(arr_lsblk_output[Count],7)
			if mounted_at ~= nil then
				table.insert(arr_mount_point,mounted_at)
			else
				table.insert(arr_mount_point,"unmounted")
			end
		end
	end
	if is_mdraid ~= nil then
	--io.write("mdraid detected \n")
		check_for_raid=1
	end
	previous_drive = current_drive
	Count = Count +1
  end

if check_for_raid == 1 then
	--removing partitions used by RAID from the list
	raid_list = check_mdadm_raids()
	local Count = 1

	while arr_partitions[Count] ~= nil  do
	local Count_raid = 1
		while raid_list[Count_raid] ~= nil  do
			if arr_partitions[Count] == raid_list[Count_raid] then
				table.remove(arr_partitions, Count)
				table.remove(arr_mount_point, Count)
				Count = Count -1 --decrementing to compensate for the removed element
				--break
			end
			Count_raid = Count_raid +1
		end
			Count = Count +1
	end
end

end


function filter_system_block_devices()

    local Count = 1
	 -- these arrays will contain a list of block devices, partitions and mount points used by system
	 system_block_devices = {}
    system_partitions = {}
	 system_mount_points ={}

	while arr_partitions[Count] ~= nil  do
	local is_boot = string.match(arr_mount_point[Count],"^/boot$")
	local is_root = string.match(arr_mount_point[Count],"^/$")
		if is_boot ~= nil or is_root ~= nil then
			--loading the array block device entry so we don't delete it twice
            table.insert(system_block_devices, strip_numbers(arr_partitions[Count]))
            table.insert(system_partitions, arr_partitions[Count])
				table.insert(system_mount_points, arr_mount_point[Count])
		end
	Count = Count +1
	end


	--removing block devices used for boot and root
	local Count = 1
	while arr_block_devices[Count] ~= nil  do
	local Count_inner = 1
		while system_block_devices[Count_inner] ~= nil  do
		if arr_block_devices[Count] == system_block_devices[Count_inner] then
			table.remove(arr_block_devices, Count)
		end
		Count_inner = Count_inner +1
		end
	Count = Count +1
	end

    	--removing partitions and mount points used for boot and root
	Count = 1
	while arr_partitions[Count] ~= nil  do
	Count_inner = 1
		while system_partitions[Count_inner] ~= nil  do
		if arr_partitions[Count] == system_partitions[Count_inner] then
			table.remove(arr_partitions, Count)
			table.remove(arr_mount_point,Count)
		end

		Count_inner = Count_inner +1
		end
	Count = Count +1
	end

end


function action_select_drive_generic(filesystem)

	load_block_device_arrays()

	--filtering block devices that are used by system
    filter_system_block_devices()

	-- creating the list of vars to use to enable buttons
	local Count = 1

	dev_sda="n"
	dev_sdb="n"
	dev_sdc="n"
	dev_sdd="n"
	dev_sde="n"
	dev_sdf="n"
	dev_sdg="n"
	dev_sdh="n"
	dev_sdi="n"
	dev_sdj="n"
	dev_sdk="n"
	dev_sdl="n"
	dev_sdm="n"
	dev_sdn="n"
	dev_sdo="n"
	dev_sdp="n"
	dev_sdq="n"
	dev_sdr="n"
	dev_sds="n"
	dev_sdt="n"
	dev_sdu="n"
	dev_sdv="n"
	dev_sdw="n"
	dev_sdx="n"
	dev_sdy="n"
	dev_sdz="n"

		while arr_block_devices[Count] ~= nil do

		if arr_block_devices[Count] == "sda" then
				dev_sda="y"
		end
		if arr_block_devices[Count] == "sdb" then
				dev_sdb="y"
		end
		if arr_block_devices[Count] == "sdc" then
				dev_sdc="y"
		end
		if arr_block_devices[Count] == "sdd" then
				dev_sdd="y"
		end
		if arr_block_devices[Count] == "sdc" then
				dev_sdc="y"
		end
		if arr_block_devices[Count] == "sdd" then
				dev_sdd="y"
		end
		if arr_block_devices[Count] == "sde" then
				dev_sde="y"
		end
		if arr_block_devices[Count] == "sdf" then
				dev_sdf="y"
		end
		if arr_block_devices[Count] == "sdg" then
				dev_sdg="y"
		end
		if arr_block_devices[Count] == "sdh" then
				dev_sdh="y"
		end
		if arr_block_devices[Count] == "sdi" then
				dev_sdi="y"
		end
		if arr_block_devices[Count] == "sdj" then
				dev_sdj="y"
		end
		if arr_block_devices[Count] == "sdk" then
				dev_sdk="y"
		end
		if arr_block_devices[Count] == "sdl" then
				dev_sdl="y"
		end
		if arr_block_devices[Count] == "sdm" then
				dev_sdm="y"
		end
		if arr_block_devices[Count] == "sdn" then
				dev_sdn="y"
		end
		if arr_block_devices[Count] == "sdo" then
				dev_sdo="y"
		end
		if arr_block_devices[Count] == "sdp" then
				dev_sdp="y"
		end
		if arr_block_devices[Count] == "sdq" then
				dev_sdq="y"
		end
		if arr_block_devices[Count] == "sdr" then
				dev_sdr="y"
		end
		if arr_block_devices[Count] == "sds" then
				dev_sds="y"
		end
		if arr_block_devices[Count] == "sdt" then
				dev_sdt="y"
		end
		if arr_block_devices[Count] == "sdu" then
				dev_sdu="y"
		end
		if arr_block_devices[Count] == "sdv" then
				dev_sdv="y"
		end
		if arr_block_devices[Count] == "sdw" then
				dev_sdw="y"
		end
		if arr_block_devices[Count] == "sdx" then
				dev_sdx="y"
		end
		if arr_block_devices[Count] == "sdy" then
				dev_sdy="y"
		end
		if arr_block_devices[Count] == "sdz" then
				dev_sdz="y"
		end

	Count = Count +1
end

		luci.template.render("storage/select_storage", {chosen_filesystem=filesystem, sda=dev_sda, sdb=dev_sdb, sdc=dev_sdc, sdd=dev_sdd, sde=dev_sde, sdf=dev_sdf, sdg=dev_sdg, sdh=dev_sdh, sdi=dev_sdi, sdj=dev_sdj, sdk=dev_sdk, sdl=dev_sdl, sdm=dev_sdm, sdn=dev_sdn, sdo=dev_sdo, sdp=dev_sdp, sdq=dev_sdq, sdr=dev_sdr, sds=dev_sds, sdt=dev_sdt, sdu=dev_sdu, sdv=dev_sdv, sdw=dev_sdw, sdx=dev_sdx, sdy=dev_sdy, sdz=dev_sdz, } )


end


function action_select_filesystem()

	available_filesystems=array_of_lines("\n",exec("ls /usr/sbin/ | grep ^mkfs. | awk -F'.' '{ print $2 }'"))

	-- creating the list of vars to use to enable buttons
	local Count = 1

	ext4="n"
	xfs="n"
	f2fs="n"
	vfat="n"

	while available_filesystems[Count] ~= nil  do

		if available_filesystems[Count] == "ext4" then
				ext4="y"
		end
		if available_filesystems[Count] == "xfs" then
				xfs="y"
		end
		if available_filesystems[Count] == "f2fs" then
            f2fs="y"
		end
		if available_filesystems[Count] == "vfat" then
            vfat="y"
		end
	Count = Count +1
	end
luci.template.render("storage/select_filesystem", {fs_ext4=ext4, fs_xfs=xfs, fs_f2fs=f2fs, fs_vfat=vfat } )
end


function format_block_device_generic(drive, filesystem)

	--wiping partition signatures
	cmdoutput = luci.util.exec("wipefs -a /dev/" .. drive)

	--creating new GPT partition scheme
	cmdoutput = cmdoutput .. luci.util.exec( "(echo g ; echo n ; echo 1 ; echo ' ' ; echo ' ' ; echo w ) | fdisk /dev/" .. drive )

	--formatting with chosen filesystem
	if filesystem == "ext4" then
		cmdoutput = cmdoutput .. luci.util.exec("(echo y )| mkfs.ext4 /dev/" .. drive .. "1")
	end
	if filesystem == "xfs" then
		cmdoutput = cmdoutput .. luci.util.exec("mkfs.xfs -f /dev/" .. drive .. "1")
	end
	if filesystem == "f2fs" then
      cmdoutput = cmdoutput .. luci.util.exec("mkfs.f2fs -f /dev/" .. drive .. "1")
	end
	if filesystem == "vfat" then
      cmdoutput = cmdoutput .. luci.util.exec("mkfs.fat /dev/" .. drive .. "1")
	end


	--formatting the output text from the commands to show it in the last page
	local arr_output = {}
	local formatted_output = ""
	arr_output = array_of_lines("\n",cmdoutput)

	local Count = 1
	while arr_output[Count] ~= nil  do
		formatted_output = formatted_output .. '<p>' .. arr_output[Count] .. '</p>' .. "\n"
	Count = Count +1
	end

	luci.template.render("storage/applied", {output=formatted_output} )

end

	--autogenerated select_drive function calls go here--

function action_select_drive_ext4()
	action_select_drive_generic("ext4")
end

function action_select_drive_xfs()
	action_select_drive_generic("xfs")
end

function action_select_drive_f2fs()
	action_select_drive_generic("f2fs")
end

function action_select_drive_vfat()
	action_select_drive_generic("vfat")
end

function action_format_sda_ext4()
	format_block_device_generic("sda", "ext4")
end

function action_format_sda_xfs()
	format_block_device_generic("sda", "xfs")
end

function action_format_sda_f2fs()
	format_block_device_generic("sda", "f2fs")
end

function action_format_sda_vfat()
	format_block_device_generic("sda", "vfat")
end

function action_format_sdb_ext4()
	format_block_device_generic("sdb", "ext4")
end

function action_format_sdb_xfs()
	format_block_device_generic("sdb", "xfs")
end

function action_format_sdb_f2fs()
	format_block_device_generic("sdb", "f2fs")
end

function action_format_sdb_vfat()
	format_block_device_generic("sdb", "vfat")
end

function action_format_sdc_ext4()
	format_block_device_generic("sdc", "ext4")
end

function action_format_sdc_xfs()
	format_block_device_generic("sdc", "xfs")
end

function action_format_sdc_f2fs()
	format_block_device_generic("sdc", "f2fs")
end

function action_format_sdc_vfat()
	format_block_device_generic("sdc", "vfat")
end

function action_format_sdd_ext4()
	format_block_device_generic("sdd", "ext4")
end

function action_format_sdd_xfs()
	format_block_device_generic("sdd", "xfs")
end

function action_format_sdd_f2fs()
	format_block_device_generic("sdd", "f2fs")
end

function action_format_sdd_vfat()
	format_block_device_generic("sdd", "vfat")
end

function action_format_sde_ext4()
	format_block_device_generic("sde", "ext4")
end

function action_format_sde_xfs()
	format_block_device_generic("sde", "xfs")
end

function action_format_sde_f2fs()
	format_block_device_generic("sde", "f2fs")
end

function action_format_sde_vfat()
	format_block_device_generic("sde", "vfat")
end

function action_format_sdf_ext4()
	format_block_device_generic("sdf", "ext4")
end

function action_format_sdf_xfs()
	format_block_device_generic("sdf", "xfs")
end

function action_format_sdf_f2fs()
	format_block_device_generic("sdf", "f2fs")
end

function action_format_sdf_vfat()
	format_block_device_generic("sdf", "vfat")
end

function action_format_sdg_ext4()
	format_block_device_generic("sdg", "ext4")
end

function action_format_sdg_xfs()
	format_block_device_generic("sdg", "xfs")
end

function action_format_sdg_f2fs()
	format_block_device_generic("sdg", "f2fs")
end

function action_format_sdg_vfat()
	format_block_device_generic("sdg", "vfat")
end

function action_format_sdh_ext4()
	format_block_device_generic("sdh", "ext4")
end

function action_format_sdh_xfs()
	format_block_device_generic("sdh", "xfs")
end

function action_format_sdh_f2fs()
	format_block_device_generic("sdh", "f2fs")
end

function action_format_sdh_vfat()
	format_block_device_generic("sdh", "vfat")
end

function action_format_sdi_ext4()
	format_block_device_generic("sdi", "ext4")
end

function action_format_sdi_xfs()
	format_block_device_generic("sdi", "xfs")
end

function action_format_sdi_f2fs()
	format_block_device_generic("sdi", "f2fs")
end

function action_format_sdi_vfat()
	format_block_device_generic("sdi", "vfat")
end

function action_format_sdj_ext4()
	format_block_device_generic("sdj", "ext4")
end

function action_format_sdj_xfs()
	format_block_device_generic("sdj", "xfs")
end

function action_format_sdj_f2fs()
	format_block_device_generic("sdj", "f2fs")
end

function action_format_sdj_vfat()
	format_block_device_generic("sdj", "vfat")
end

function action_format_sdk_ext4()
	format_block_device_generic("sdk", "ext4")
end

function action_format_sdk_xfs()
	format_block_device_generic("sdk", "xfs")
end

function action_format_sdk_f2fs()
	format_block_device_generic("sdk", "f2fs")
end

function action_format_sdk_vfat()
	format_block_device_generic("sdk", "vfat")
end

function action_format_sdl_ext4()
	format_block_device_generic("sdl", "ext4")
end

function action_format_sdl_xfs()
	format_block_device_generic("sdl", "xfs")
end

function action_format_sdl_f2fs()
	format_block_device_generic("sdl", "f2fs")
end

function action_format_sdl_vfat()
	format_block_device_generic("sdl", "vfat")
end

function action_format_sdm_ext4()
	format_block_device_generic("sdm", "ext4")
end

function action_format_sdm_xfs()
	format_block_device_generic("sdm", "xfs")
end

function action_format_sdm_f2fs()
	format_block_device_generic("sdm", "f2fs")
end

function action_format_sdm_vfat()
	format_block_device_generic("sdm", "vfat")
end

function action_format_sdn_ext4()
	format_block_device_generic("sdn", "ext4")
end

function action_format_sdn_xfs()
	format_block_device_generic("sdn", "xfs")
end

function action_format_sdn_f2fs()
	format_block_device_generic("sdn", "f2fs")
end

function action_format_sdn_vfat()
	format_block_device_generic("sdn", "vfat")
end

function action_format_sdo_ext4()
	format_block_device_generic("sdo", "ext4")
end

function action_format_sdo_xfs()
	format_block_device_generic("sdo", "xfs")
end

function action_format_sdo_f2fs()
	format_block_device_generic("sdo", "f2fs")
end

function action_format_sdo_vfat()
	format_block_device_generic("sdo", "vfat")
end

function action_format_sdp_ext4()
	format_block_device_generic("sdp", "ext4")
end

function action_format_sdp_xfs()
	format_block_device_generic("sdp", "xfs")
end

function action_format_sdp_f2fs()
	format_block_device_generic("sdp", "f2fs")
end

function action_format_sdp_vfat()
	format_block_device_generic("sdp", "vfat")
end

function action_format_sdq_ext4()
	format_block_device_generic("sdq", "ext4")
end

function action_format_sdq_xfs()
	format_block_device_generic("sdq", "xfs")
end

function action_format_sdq_f2fs()
	format_block_device_generic("sdq", "f2fs")
end

function action_format_sdq_vfat()
	format_block_device_generic("sdq", "vfat")
end

function action_format_sdr_ext4()
	format_block_device_generic("sdr", "ext4")
end

function action_format_sdr_xfs()
	format_block_device_generic("sdr", "xfs")
end

function action_format_sdr_f2fs()
	format_block_device_generic("sdr", "f2fs")
end

function action_format_sdr_vfat()
	format_block_device_generic("sdr", "vfat")
end

function action_format_sds_ext4()
	format_block_device_generic("sds", "ext4")
end

function action_format_sds_xfs()
	format_block_device_generic("sds", "xfs")
end

function action_format_sds_f2fs()
	format_block_device_generic("sds", "f2fs")
end

function action_format_sds_vfat()
	format_block_device_generic("sds", "vfat")
end

function action_format_sdt_ext4()
	format_block_device_generic("sdt", "ext4")
end

function action_format_sdt_xfs()
	format_block_device_generic("sdt", "xfs")
end

function action_format_sdt_f2fs()
	format_block_device_generic("sdt", "f2fs")
end

function action_format_sdt_vfat()
	format_block_device_generic("sdt", "vfat")
end

function action_format_sdu_ext4()
	format_block_device_generic("sdu", "ext4")
end

function action_format_sdu_xfs()
	format_block_device_generic("sdu", "xfs")
end

function action_format_sdu_f2fs()
	format_block_device_generic("sdu", "f2fs")
end

function action_format_sdu_vfat()
	format_block_device_generic("sdu", "vfat")
end

function action_format_sdv_ext4()
	format_block_device_generic("sdv", "ext4")
end

function action_format_sdv_xfs()
	format_block_device_generic("sdv", "xfs")
end

function action_format_sdv_f2fs()
	format_block_device_generic("sdv", "f2fs")
end

function action_format_sdv_vfat()
	format_block_device_generic("sdv", "vfat")
end

function action_format_sdw_ext4()
	format_block_device_generic("sdw", "ext4")
end

function action_format_sdw_xfs()
	format_block_device_generic("sdw", "xfs")
end

function action_format_sdw_f2fs()
	format_block_device_generic("sdw", "f2fs")
end

function action_format_sdw_vfat()
	format_block_device_generic("sdw", "vfat")
end

function action_format_sdx_ext4()
	format_block_device_generic("sdx", "ext4")
end

function action_format_sdx_xfs()
	format_block_device_generic("sdx", "xfs")
end

function action_format_sdx_f2fs()
	format_block_device_generic("sdx", "f2fs")
end

function action_format_sdx_vfat()
	format_block_device_generic("sdx", "vfat")
end

function action_format_sdy_ext4()
	format_block_device_generic("sdy", "ext4")
end

function action_format_sdy_xfs()
	format_block_device_generic("sdy", "xfs")
end

function action_format_sdy_f2fs()
	format_block_device_generic("sdy", "f2fs")
end

function action_format_sdy_vfat()
	format_block_device_generic("sdy", "vfat")
end

function action_format_sdz_ext4()
	format_block_device_generic("sdz", "ext4")
end

function action_format_sdz_xfs()
	format_block_device_generic("sdz", "xfs")
end

function action_format_sdz_f2fs()
	format_block_device_generic("sdz", "f2fs")
end

function action_format_sdz_vfat()
	format_block_device_generic("sdz", "vfat")
end

--end of autogenerated select_drive functions--